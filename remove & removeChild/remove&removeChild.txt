1️⃣ Why Can’t We Store .remove() in a Variable?

const guava = fruitList.children[2]; 
const removedGuava = guava.remove(); // ❌ Not possible!
console.log(removedGuava); // undefined

	•	The .remove() method does not return anything (it returns undefined).
	•	Once .remove() is called, the element is gone from the DOM forever, and you can’t reuse it.
	•	Since it doesn’t return the element, you can’t store it in a variable for later use.



2️⃣ How Can .removeChild() Be Reused?

const fruitList = document.querySelector('.fruitList'); 
const guava = fruitList.children[2]; 

const removedGuava = fruitList.removeChild(guava); // ✅ Stores removed element
console.log(removedGuava); // <li>Guava</li> ✅ (Still exists in memory)

// Re-add after 3 seconds
setTimeout(() => fruitList.appendChild(removedGuava), 3000);


✔ Key difference:
	•	.removeChild() returns the removed element.
	•	Since the element still exists in memory, you can reuse it later (e.g., re-add it).



3️⃣ Example: Removing and Reusing an Element

➢ Let’s say we have this HTML:
<ul class="fruitList">
    <li>Apple</li>
    <li>Banana</li>
    <li>Guava</li>
    <li>Orange</li>
</ul>
<button onclick="removeGuava()">Remove Guava</button>
<button onclick="restoreGuava()">Restore Guava</button>


➢ Now, the JavaScript:
const fruitList = document.querySelector('.fruitList'); 
let removedFruit = null; // Store removed item

function removeGuava() {
    const guava = fruitList.children[2]; 
    removedFruit = fruitList.removeChild(guava); // ✅ Store the removed item
}

function restoreGuava() {
    if (removedFruit) {
        fruitList.appendChild(removedFruit); // ✅ Reuse the removed item
        removedFruit = null; // Clear storage
    }
}


	•	Clicking “Remove Guava” removes it.
	•	Clicking “Restore Guava” adds it back.
	•	This is only possible with .removeChild() because .remove() does not return the element.




Conclusion: Which One Should You Use?

Method                   Returns Element?               Reusable?           Best for?
.remove()           ❌ No (returns undefined)            ❌ No               Permanent removal
.removeChild()      ✅ Yes (returns removed element)     ✅ Yes              Temporary removal (reuse later)

So, use .remove() when you want to permanently delete an element, and use .removeChild() if you might need
to restore it later. 🚀