# ----------------------------------------------------- THIS ---------------------------------------------------- #

1Ô∏è‚É£ Global Context

- In the global scope (outside any function), this refers to:

	‚Ä¢	In a browser: The window object.
	‚Ä¢	In Node.js: The global object.

    console.log(this); // In a browser: window




2Ô∏è‚É£ Inside a Function (Non-Strict Mode)

- When used inside a regular function, this refers to the global object (window in browsers).

function showThis() {
  console.log(this);
}
showThis(); // window (in browsers)


‚Ä¢ But in strict mode ('use strict'), this will be undefined.


"use strict";
function showThis() {
  console.log(this);
}
showThis(); // undefined




3Ô∏è‚É£ Inside an Object (Method Context)

- When a function is called as an object‚Äôs method, this refers to the object itself.

const person = {
  name: "Alice",
  greet: function () {
    console.log(this.name);
  },
};
person.greet(); // Alice




4Ô∏è‚É£ Inside a Constructor Function

- In a constructor function, this refers to the newly created object.

function Person(name) {
  this.name = name;
}
const user = new Person("Bob");
console.log(user.name); // Bob



5Ô∏è‚É£ Arrow Functions (this is Lexical)

- Arrow functions don‚Äôt have their own this. They inherit this from their surrounding scope.

const obj = {
  name: "Charlie",
  greet: function () {
    const inner = () => {
      console.log(this.name);
    };
    inner();
  },
};
obj.greet(); // Charlie

‚Ä¢ Here, inner() uses this from greet(), which refers to obj.




Summary :


Context	                    this refers to

Global Scope	            window (or global in Node.js)
Regular Function	        window (or undefined in strict mode)
Object Method	            The object itself
Constructor Function	    The newly created object
Arrow Function	            this from the surrounding scope


# --------------------------------------------------------------------------------------------------------------- #


const user = {
    username: "subho",
    age: 24,
    welcomeMessage: function () {
        console.log(`${user.username}, welcome to website`);
    }
}

user.welcomeMessage(); // subho, welcome to website

- Here, ‚Äúuser.username‚Äù is also working, so why do we use ‚Äúthis.username‚Äù?

- ‚Äúthis‚Äù means current context, which means accessing all the variables inside this scope.

- We can access them with object names. Here, it is ‚Äúuser.username‚Äù So why are we using ‚Äúthis‚Äù?




‚Ä¢ using user.username works just fine. However, using this.username is preferred for better flexibility and 
  maintainability.




üîπ Why Use this Instead of user?


1Ô∏è‚É£ this Keeps the Code Dynamic :

- If we use user.username, the method is hardcoded to the user object. If we assign this method to another object,
it will still refer to user, which is incorrect.

‚ùå Using user.username (Hardcoded Reference)


const user = {
  username: "subho",
  age: 24,
  welcomeMessage: function () {
    console.log(`${user.username}, welcome to the website`);
  },
};

const admin = { username: "admin", welcomeMessage: user.welcomeMessage };

admin.welcomeMessage(); // ‚ùå Still prints "subho" instead of "admin"



‚Ä¢ Even though welcomeMessage is called on admin, it still refers to user.username, which is incorrect.




2Ô∏è‚É£ this Adapts to Different Objects :

- Using this.username, we ensure that the method refers to the object that calls it, making it reusable.

‚úÖ Using this.username (Flexible Reference)


const user = {
  username: "subho",
  age: 24,
  welcomeMessage: function () {
    console.log(`${this.username}, welcome to the website`);
  },
};

const admin = { username: "admin", welcomeMessage: user.welcomeMessage };

admin.welcomeMessage(); // ‚úÖ "admin, welcome to the website"



‚Ä¢ Now, this.username refers to the object calling the function (admin), making it dynamic and reusable.



3Ô∏è‚É£ What If the Object Name Changes?

- Imagine renaming user to member. If we used user.username, the code would break. But this.username will still work.

‚ùå Hardcoded Object Name (Breaks on Renaming)


const member = {
  username: "subho",
  welcomeMessage: function () {
    console.log(`${user.username}, welcome to the website`); // ‚ùå ERROR: user is not defined
  },
};

member.welcomeMessage();



‚Ä¢ Since user doesn‚Äôt exist anymore, this will cause an error.



‚úÖ this Works Regardless of Object Name :

const member = {
  username: "subho",
  welcomeMessage: function () {
    console.log(`${this.username}, welcome to the website`);
  },
};

member.welcomeMessage(); // ‚úÖ "subho, welcome to the website"


‚Ä¢ Even after renaming user to member, this.username still works.




üîπ Conclusion

Approach	        Works for All Objects?	    Breaks If Object Name Changes?  	Recommended?

user.username	    ‚ùå No	                    ‚úÖ Yes	                           ‚ùå No
this.username	    ‚úÖ Yes	                    ‚ùå No	                           ‚úÖ Yes


‚úÖ Use this.username for dynamic and reusable code.
üöÄ It makes your methods flexible and avoids dependency on hardcoded object names.


# --------------------------------------------------------------------------------------------------------------- #

Q. Why does showThis refer to the global object and console.log(this) refer to the empty object?

console.log(this); // {}


function showThis() {
    console.log(this);
}
showThis(); // window (in browsers)




üîπ 1. Why Does console.log(this); Log {} (Empty Object in Node.js)?


console.log(this); // {} (In Node.js)


‚Ä¢	When this is used in the global scope (outside of a function) in Node.js, it does not refer to the global object.
‚Ä¢	Instead, in the global scope of a Node.js module, this is an empty object {}.
‚Ä¢	This happens because each Node.js file is treated as a separate module (not as part of the global scope).


üìå Node.js Example:

console.log(this); // {} (Not global)
console.log(global === this); // false


üìå Browser Example:

console.log(this); // window (In browsers)



‚Ä¢	In browsers, this in the global scope does refer to window.




üîπ 2. Why Does showThis(); Log window?

function showThis() {
    console.log(this);
}
showThis(); // window (in browsers)


‚Ä¢	When calling showThis(); as a regular function, this refers to the global object.
‚Ä¢	In browsers, the global object is window, so console.log(this); prints window.
‚Ä¢	In Node.js (non-strict mode), this inside a function still refers to the global object (global instead of {}).


üìå Browser Behavior:

function showThis() {
    console.log(this);
}
showThis(); // window (global object in browsers)



üìå Node.js Behavior:

function showThis() {
    console.log(this);
}
showThis(); // global (in Node.js, non-strict mode)



üìå With 'use strict' in Node.js & Browsers:

"use strict";
function showThis() {
    console.log(this);
}
showThis(); // undefined (because 'this' is not bound to global in strict mode)




üî• Final Explanation

	1.	In the global scope:

	    ‚Ä¢   In Node.js, this is {} because Node runs in a module scope.
	    ‚Ä¢   In browsers, this is window.


	2.	Inside a function (showThis();):

	    ‚Ä¢   Non-strict mode: this refers to the global object (window in browsers, global in Node.js).
	    ‚Ä¢   Strict mode ('use strict'): this becomes undefined.

# --------------------------------------------------------------------------------------------------------------- #