let addNums = [2, 3, 4];
let sum = 0; // Initialize sum to 0

for (let i = 0; i < addNums.length; i++) {
    sum += addNums[i]; // Add each number to sum
}

console.log(sum); // Output: 9



â€¢ If we do (less than equal-to) i <= addNums.length, the output will be Nan, Why?



let addNums = [2, 3, 4];
let sum = 0; 

for (let i = 0; i <= addNums.length; i++) {
    sum += addNums[i]; 
}

console.log(sum); // Nan





for (let i = 0; i <= addNums.length; i++)


âœ¦ Explanation of the Issue :

	â€¢	The condition i <= addNums.length is incorrect.
	â€¢	addNums.length is 3, so i will take values 0, 1, 2, and 3.
	â€¢	However, valid indices for addNums are only 0, 1, and 2.
	â€¢	When i = 3, addNums[3] does not exist and returns undefined.
	â€¢	Adding undefined to sum results in NaN.




Step-by-Step Execution

âœ… Correct indices:


i	addNums[i]	sum

0	    2	     2
1	    3	     5
2	    4	     9
3	undefined	NaN



ðŸ’¡ Since undefined + number = NaN, sum becomes NaN.